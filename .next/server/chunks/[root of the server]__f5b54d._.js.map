{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/prisma/prisma-client.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\n\r\nconst prismaClientSingleton = () => {\r\n    return new PrismaClient()\r\n}\r\n\r\ndeclare const globalThis: {\r\n    prismaGlobal: ReturnType<typeof prismaClientSingleton>;\r\n} & typeof global;\r\n\r\nexport const prisma = globalThis.prismaGlobal ?? prismaClientSingleton()\r\n\r\nif (process.env.NODE_ENV !== 'production') globalThis.prismaGlobal = prisma"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,wBAAwB;IAC1B,OAAO,IAAI,2GAAA,CAAA,eAAY;AAC3B;AAMO,MAAM,SAAS,WAAW,YAAY,IAAI;AAEjD,wCAA2C,WAAW,YAAY,GAAG"}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/lib/calc-cart-item-total-amount.ts"],"sourcesContent":["import { Ingredient, ProductItem } from '@prisma/client';\r\n\r\ntype Item = {\r\n  productItem: ProductItem;\r\n  ingredients: Ingredient[];\r\n  quantity: number;\r\n};\r\n\r\nexport const calcCartItemTotalAmount = (item: Item): number => {\r\n  return (\r\n    (item.productItem.price +\r\n      item.ingredients.reduce((acc, ingredient) => acc + ingredient.price, 0)) *\r\n    item.quantity\r\n  );\r\n};\r\n"],"names":[],"mappings":";;;AAQO,MAAM,0BAA0B,CAAC;IACtC,OACE,CAAC,KAAK,WAAW,CAAC,KAAK,GACrB,KAAK,WAAW,CAAC,MAAM,CAAC,CAAC,KAAK,aAAe,MAAM,WAAW,KAAK,EAAE,EAAE,IACzE,KAAK,QAAQ;AAEjB"}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/api/cart/route.ts"],"sourcesContent":["import {NextRequest, NextResponse} from 'next/server';\r\nimport {prisma} from '../../../../prisma/prisma-client';\r\nimport { calcCartItemTotalAmount } from '@/lib/calc-cart-item-total-amount';\r\n\r\n\r\nexport async function GET(req: NextRequest) {\r\n    try {\r\n\r\n        const cartToken = req.cookies.get('cartToken')?.value;\r\n\r\n\r\n        if (!cartToken) {\r\n            return NextResponse.json({items: []});\r\n        }\r\n\r\n        const userCart = await prisma.cart.findFirst({\r\n            where: {\r\n                OR: [\r\n                    {\r\n                        tokenId: cartToken,\r\n                    },\r\n                ],\r\n            },\r\n            include: {\r\n                items: {\r\n                    orderBy: {\r\n                        createdAt: 'desc',\r\n                    },\r\n                    include: {\r\n                        productItem: {\r\n                            include: {\r\n                                product: true,\r\n                            },\r\n                        },\r\n                        ingredients: true,\r\n                    },\r\n                },\r\n            },\r\n        });\r\n\r\n        return NextResponse.json(userCart);\r\n    } catch (err) {\r\n        console.log(err);\r\n        return NextResponse.json({message: '[CART_GET] Server error'}, {status: 500});\r\n    }\r\n}\r\n\r\nasync function getCartTotalAmount(cartId: number): Promise<number> {\r\n    const userCartAfterUpdate = await prisma.cart.findFirst({\r\n        where: {\r\n            id: cartId,\r\n        },\r\n        include: {\r\n            items: {\r\n                orderBy: {\r\n                    createdAt: 'desc',\r\n                },\r\n                include: {\r\n                    productItem: {\r\n                        include: {\r\n                            product: true,\r\n                        },\r\n                    },\r\n                    ingredients: true,\r\n                },\r\n            },\r\n        },\r\n        orderBy: {\r\n            createdAt: 'desc',\r\n        },\r\n    });\r\n\r\n    const totalAmount = userCartAfterUpdate?.items.reduce(\r\n        (acc, item) => acc + calcCartItemTotalAmount(item),\r\n        0,\r\n    );\r\n\r\n    return totalAmount ?? 0;\r\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAGO,eAAe,IAAI,GAAgB;IACtC,IAAI;QAEA,MAAM,YAAY,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc;QAGhD,IAAI,CAAC,WAAW;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAC,OAAO,EAAE;YAAA;QACvC;QAEA,MAAM,WAAW,MAAM,4HAAA,CAAA,SAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YACzC,OAAO;gBACH,IAAI;oBACA;wBACI,SAAS;oBACb;iBACH;YACL;YACA,SAAS;gBACL,OAAO;oBACH,SAAS;wBACL,WAAW;oBACf;oBACA,SAAS;wBACL,aAAa;4BACT,SAAS;gCACL,SAAS;4BACb;wBACJ;wBACA,aAAa;oBACjB;gBACJ;YACJ;QACJ;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,KAAK;QACV,QAAQ,GAAG,CAAC;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAC,SAAS;QAAyB,GAAG;YAAC,QAAQ;QAAG;IAC/E;AACJ;AAEA,eAAe,mBAAmB,MAAc;IAC5C,MAAM,sBAAsB,MAAM,4HAAA,CAAA,SAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACpD,OAAO;YACH,IAAI;QACR;QACA,SAAS;YACL,OAAO;gBACH,SAAS;oBACL,WAAW;gBACf;gBACA,SAAS;oBACL,aAAa;wBACT,SAAS;4BACL,SAAS;wBACb;oBACJ;oBACA,aAAa;gBACjB;YACJ;QACJ;QACA,SAAS;YACL,WAAW;QACf;IACJ;IAEA,MAAM,cAAc,qBAAqB,MAAM,OAC3C,CAAC,KAAK,OAAS,MAAM,CAAA,GAAA,uJAAA,CAAA,0BAAuB,AAAD,EAAE,OAC7C;IAGJ,OAAO,eAAe;AAC1B"}},
    {"offset": {"line": 161, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}