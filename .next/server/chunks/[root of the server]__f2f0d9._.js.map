{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/prisma/prisma-client.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst prismaClientSingleton = () => {\n    return new PrismaClient()\n}\n\ndeclare const globalThis: {\n    prismaGlobal: ReturnType<typeof prismaClientSingleton>;\n} & typeof global;\n\nexport const prisma = globalThis.prismaGlobal ?? prismaClientSingleton()\n\nif (process.env.NODE_ENV !== 'production') globalThis.prismaGlobal = prisma"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,wBAAwB;IAC1B,OAAO,IAAI,2GAAA,CAAA,eAAY;AAC3B;AAMO,MAAM,SAAS,WAAW,YAAY,IAAI;AAEjD,wCAA2C,WAAW,YAAY,GAAG"}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/lib/calc-cart-item-total-amount.ts"],"sourcesContent":["import { Ingredient, ProductItem } from '@prisma/client';\n\ntype Item = {\n  productItem: ProductItem;\n  ingredients: Ingredient[];\n  quantity: number;\n};\n\nexport const calcCartItemTotalAmount = (item: Item): number => {\n  return (\n    (item.productItem.price +\n      item.ingredients.reduce((acc, ingredient) => acc + ingredient.price, 0)) *\n    item.quantity\n  );\n};\n"],"names":[],"mappings":";;;AAQO,MAAM,0BAA0B,CAAC;IACtC,OACE,CAAC,KAAK,WAAW,CAAC,KAAK,GACrB,KAAK,WAAW,CAAC,MAAM,CAAC,CAAC,KAAK,aAAe,MAAM,WAAW,KAAK,EAAE,EAAE,IACzE,KAAK,QAAQ;AAEjB"}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/api/cart/[id]/route.ts"],"sourcesContent":["import {NextRequest, NextResponse} from \"next/server\";\nimport {prisma} from \"../../../../../prisma/prisma-client\";\nimport {calcCartItemTotalAmount} from \"@/lib/calc-cart-item-total-amount\";\n\nasync function updateCartTotalAmount(userId: number, cartToken: string) {\n\n    const userCart = await prisma.cart.findFirst({\n        where: {\n            OR: [\n                {\n                    userId,\n                },\n                {\n                    tokenId: cartToken,\n                },\n            ],\n        },\n        include: {\n            items: {\n                orderBy: {\n                    createdAt: 'desc',\n                },\n                include: {\n                    productItem: {\n                        include: {\n                            product: true,\n                        },\n                    },\n                    ingredients: true,\n                },\n            },\n        },\n    });\n\n    const totalAmount = userCart?.items.reduce((acc, item) => {\n        return acc + calcCartItemTotalAmount(item);\n    }, 0);\n\n    return prisma.cart.update({\n        where: {\n            id: userCart?.id,\n        },\n        data: {\n            totalAmount,\n        },\n        include: {\n            items: {\n                orderBy: {\n                    createdAt: 'desc',\n                },\n                include: {\n                    productItem: {\n                        include: {\n                            product: true,\n                        },\n                    },\n                    ingredients: true,\n                },\n            },\n        },\n    });\n}\n\n\nexport async function PATCH(req: NextRequest, {params}: { params: { id: string } }) {\n\n    const {id} = params;\n    const data = await (req.json()) as { quantity: number };\n    const token = req.cookies.get('cartToken')?.value;\n\n\n    if (!token) {\n        return NextResponse.json({error: 'Cart token not found'});\n    }\n\n\n    const cartItem = await prisma.cartItem.findFirst({\n        where: {\n            id: Number(id),\n        }\n    })\n\n    if (!cartItem) {\n        return NextResponse.json({error: 'Cart item not found'});\n    }\n\n    await prisma.cartItem.update({\n        where: {\n            id: cartItem.id,\n        },\n        data: {\n            quantity: data.quantity,\n        }\n    })\n\n    await updateCartTotalAmount(Number(id), token);\n\n\n\n    const updatedCartItems = await prisma.cartItem.findMany({\n        where: {\n            cartId: cartItem.id\n        },\n        include: {\n            productItem: {\n                include: {\n                    product: true,\n                },\n            },\n            ingredients: true,\n        },\n    });\n\n    return NextResponse.json(updatedCartItems);\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,eAAe,sBAAsB,MAAc,EAAE,SAAiB;IAElE,MAAM,WAAW,MAAM,4HAAA,CAAA,SAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACzC,OAAO;YACH,IAAI;gBACA;oBACI;gBACJ;gBACA;oBACI,SAAS;gBACb;aACH;QACL;QACA,SAAS;YACL,OAAO;gBACH,SAAS;oBACL,WAAW;gBACf;gBACA,SAAS;oBACL,aAAa;wBACT,SAAS;4BACL,SAAS;wBACb;oBACJ;oBACA,aAAa;gBACjB;YACJ;QACJ;IACJ;IAEA,MAAM,cAAc,UAAU,MAAM,OAAO,CAAC,KAAK;QAC7C,OAAO,MAAM,CAAA,GAAA,uJAAA,CAAA,0BAAuB,AAAD,EAAE;IACzC,GAAG;IAEH,OAAO,4HAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACtB,OAAO;YACH,IAAI,UAAU;QAClB;QACA,MAAM;YACF;QACJ;QACA,SAAS;YACL,OAAO;gBACH,SAAS;oBACL,WAAW;gBACf;gBACA,SAAS;oBACL,aAAa;wBACT,SAAS;4BACL,SAAS;wBACb;oBACJ;oBACA,aAAa;gBACjB;YACJ;QACJ;IACJ;AACJ;AAGO,eAAe,MAAM,GAAgB,EAAE,EAAC,MAAM,EAA6B;IAE9E,MAAM,EAAC,EAAE,EAAC,GAAG;IACb,MAAM,OAAO,MAAO,IAAI,IAAI;IAC5B,MAAM,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc;IAG5C,IAAI,CAAC,OAAO;QACR,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAC,OAAO;QAAsB;IAC3D;IAGA,MAAM,WAAW,MAAM,4HAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,SAAS,CAAC;QAC7C,OAAO;YACH,IAAI,OAAO;QACf;IACJ;IAEA,IAAI,CAAC,UAAU;QACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAC,OAAO;QAAqB;IAC1D;IAEA,MAAM,4HAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;QACzB,OAAO;YACH,IAAI,SAAS,EAAE;QACnB;QACA,MAAM;YACF,UAAU,KAAK,QAAQ;QAC3B;IACJ;IAEA,MAAM,sBAAsB,OAAO,KAAK;IAIxC,MAAM,mBAAmB,MAAM,4HAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;QACpD,OAAO;YACH,QAAQ,SAAS,EAAE;QACvB;QACA,SAAS;YACL,aAAa;gBACT,SAAS;oBACL,SAAS;gBACb;YACJ;YACA,aAAa;QACjB;IACJ;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC7B"}},
    {"offset": {"line": 190, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}