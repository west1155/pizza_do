{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/prisma/prisma-client.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\n\r\nconst prismaClientSingleton = () => {\r\n    return new PrismaClient()\r\n}\r\n\r\ndeclare const globalThis: {\r\n    prismaGlobal: ReturnType<typeof prismaClientSingleton>;\r\n} & typeof global;\r\n\r\nexport const prisma = globalThis.prismaGlobal ?? prismaClientSingleton()\r\n\r\nif (process.env.NODE_ENV !== 'production') globalThis.prismaGlobal = prisma"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,wBAAwB;IAC1B,OAAO,IAAI,2GAAA,CAAA,eAAY;AAC3B;AAMO,MAAM,SAAS,WAAW,YAAY,IAAI;AAEjD,wCAA2C,WAAW,YAAY,GAAG"}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/lib/calc-cart-item-total-amount.ts"],"sourcesContent":["import { Ingredient, ProductItem } from '@prisma/client';\r\n\r\ntype Item = {\r\n  productItem: ProductItem;\r\n  ingredients: Ingredient[];\r\n  quantity: number;\r\n};\r\n\r\nexport const calcCartItemTotalAmount = (item: Item): number => {\r\n  return (\r\n    (item.productItem.price +\r\n      item.ingredients.reduce((acc, ingredient) => acc + ingredient.price, 0)) *\r\n    item.quantity\r\n  );\r\n};\r\n"],"names":[],"mappings":";;;AAQO,MAAM,0BAA0B,CAAC;IACtC,OACE,CAAC,KAAK,WAAW,CAAC,KAAK,GACrB,KAAK,WAAW,CAAC,MAAM,CAAC,CAAC,KAAK,aAAe,MAAM,WAAW,KAAK,EAAE,EAAE,IACzE,KAAK,QAAQ;AAEjB"}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/api/cart/[id]/route.ts"],"sourcesContent":["import {NextRequest, NextResponse} from \"next/server\";\r\nimport {prisma} from \"../../../../../prisma/prisma-client\";\r\nimport {calcCartItemTotalAmount} from \"@/lib/calc-cart-item-total-amount\";\r\n\r\nasync function updateCartTotalAmount(userId: number, cartToken: string) {\r\n\r\n    const userCart = await prisma.cart.findFirst({\r\n        where: {\r\n            OR: [\r\n                {\r\n                    userId,\r\n                },\r\n                {\r\n                    tokenId: cartToken,\r\n                },\r\n            ],\r\n        },\r\n        include: {\r\n            items: {\r\n                orderBy: {\r\n                    createdAt: 'desc',\r\n                },\r\n                include: {\r\n                    productItem: {\r\n                        include: {\r\n                            product: true,\r\n                        },\r\n                    },\r\n                    ingredients: true,\r\n                },\r\n            },\r\n        },\r\n    });\r\n\r\n    const totalAmount = userCart?.items.reduce((acc, item) => {\r\n        return acc + calcCartItemTotalAmount(item);\r\n    }, 0);\r\n\r\n    return prisma.cart.update({\r\n        where: {\r\n            id: userCart?.id,\r\n        },\r\n        data: {\r\n            totalAmount,\r\n        },\r\n        include: {\r\n            items: {\r\n                orderBy: {\r\n                    createdAt: 'desc',\r\n                },\r\n                include: {\r\n                    productItem: {\r\n                        include: {\r\n                            product: true,\r\n                        },\r\n                    },\r\n                    ingredients: true,\r\n                },\r\n            },\r\n        },\r\n    });\r\n}\r\n\r\n\r\nexport async function PATCH(req: NextRequest, {params}: { params: { id: string } }) {\r\n\r\n    const data = await (req.json()) as { quantity: number };\r\n    const token = req.cookies.get('cartToken')?.value;\r\n\r\n\r\n    if (!token) {\r\n        return NextResponse.json({error: 'Cart token not found'});\r\n    }\r\n\r\n\r\n    const cartItem = await prisma.cartItem.findFirst({\r\n        where: {\r\n            id: Number(params.id),\r\n        }\r\n    })\r\n\r\n    if (!cartItem) {\r\n        return NextResponse.json({error: 'Cart item not found'});\r\n    }\r\n\r\n    await prisma.cartItem.update({\r\n        where: {\r\n            id: cartItem.id,\r\n        },\r\n        data: {\r\n            quantity: data.quantity,\r\n        }\r\n    })\r\n\r\n    await updateCartTotalAmount(Number(params.id), token);\r\n\r\n\r\n    const updatedCartItems = await prisma.cartItem.findMany({\r\n        where: {\r\n            cartId: cartItem.id\r\n        },\r\n        include: {\r\n            productItem: {\r\n                include: {\r\n                    product: true,\r\n                },\r\n            },\r\n            ingredients: true,\r\n        },\r\n    });\r\n\r\n    return NextResponse.json(updatedCartItems);\r\n}\r\nexport async function DELETE(req: NextRequest, { params }: { params: { id: string } }) {\r\n    try {\r\n        const cartToken = req.cookies.get('cartToken')?.value;\r\n        const userId = Number(params?.id);\r\n\r\n        if (!cartToken) {\r\n            return NextResponse.json({ error: 'Cart token not found' });\r\n        }\r\n\r\n        const cartItem = await prisma.cartItem.findFirst({\r\n            where: {\r\n                id: Number(params.id),\r\n            },\r\n        });\r\n\r\n        if (!cartItem) {\r\n            return NextResponse.json({ error: 'Cart item not found' });\r\n        }\r\n\r\n        await prisma.cartItem.delete({\r\n            where: {\r\n                id: cartItem.id,\r\n            },\r\n        });\r\n\r\n        await updateCartTotalAmount(userId, cartToken);\r\n\r\n        const userCart = await prisma.cart.findFirst({\r\n            where: {\r\n                OR: [\r\n                    {\r\n                        userId,\r\n                    },\r\n                    {\r\n                        tokenId: cartToken,\r\n                    },\r\n                ],\r\n            },\r\n            include: {\r\n                items: {\r\n                    orderBy: {\r\n                        createdAt: 'desc',\r\n                    },\r\n                    include: {\r\n                        productItem: {\r\n                            include: {\r\n                                product: true,\r\n                            },\r\n                        },\r\n                        ingredients: true,\r\n                    },\r\n                },\r\n            },\r\n        });\r\n\r\n        return NextResponse.json(userCart);\r\n    } catch (err) {\r\n        console.log(err);\r\n        return NextResponse.json({ message: '[CART_DELETE] Server error' }, { status: 500 });\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEA,eAAe,sBAAsB,MAAc,EAAE,SAAiB;IAElE,MAAM,WAAW,MAAM,4HAAA,CAAA,SAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACzC,OAAO;YACH,IAAI;gBACA;oBACI;gBACJ;gBACA;oBACI,SAAS;gBACb;aACH;QACL;QACA,SAAS;YACL,OAAO;gBACH,SAAS;oBACL,WAAW;gBACf;gBACA,SAAS;oBACL,aAAa;wBACT,SAAS;4BACL,SAAS;wBACb;oBACJ;oBACA,aAAa;gBACjB;YACJ;QACJ;IACJ;IAEA,MAAM,cAAc,UAAU,MAAM,OAAO,CAAC,KAAK;QAC7C,OAAO,MAAM,CAAA,GAAA,uJAAA,CAAA,0BAAuB,AAAD,EAAE;IACzC,GAAG;IAEH,OAAO,4HAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACtB,OAAO;YACH,IAAI,UAAU;QAClB;QACA,MAAM;YACF;QACJ;QACA,SAAS;YACL,OAAO;gBACH,SAAS;oBACL,WAAW;gBACf;gBACA,SAAS;oBACL,aAAa;wBACT,SAAS;4BACL,SAAS;wBACb;oBACJ;oBACA,aAAa;gBACjB;YACJ;QACJ;IACJ;AACJ;AAGO,eAAe,MAAM,GAAgB,EAAE,EAAC,MAAM,EAA6B;IAE9E,MAAM,OAAO,MAAO,IAAI,IAAI;IAC5B,MAAM,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc;IAG5C,IAAI,CAAC,OAAO;QACR,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAC,OAAO;QAAsB;IAC3D;IAGA,MAAM,WAAW,MAAM,4HAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,SAAS,CAAC;QAC7C,OAAO;YACH,IAAI,OAAO,OAAO,EAAE;QACxB;IACJ;IAEA,IAAI,CAAC,UAAU;QACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAC,OAAO;QAAqB;IAC1D;IAEA,MAAM,4HAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;QACzB,OAAO;YACH,IAAI,SAAS,EAAE;QACnB;QACA,MAAM;YACF,UAAU,KAAK,QAAQ;QAC3B;IACJ;IAEA,MAAM,sBAAsB,OAAO,OAAO,EAAE,GAAG;IAG/C,MAAM,mBAAmB,MAAM,4HAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;QACpD,OAAO;YACH,QAAQ,SAAS,EAAE;QACvB;QACA,SAAS;YACL,aAAa;gBACT,SAAS;oBACL,SAAS;gBACb;YACJ;YACA,aAAa;QACjB;IACJ;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC7B;AACO,eAAe,OAAO,GAAgB,EAAE,EAAE,MAAM,EAA8B;IACjF,IAAI;QACA,MAAM,YAAY,IAAI,OAAO,CAAC,GAAG,CAAC,cAAc;QAChD,MAAM,SAAS,OAAO,QAAQ;QAE9B,IAAI,CAAC,WAAW;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAuB;QAC7D;QAEA,MAAM,WAAW,MAAM,4HAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,SAAS,CAAC;YAC7C,OAAO;gBACH,IAAI,OAAO,OAAO,EAAE;YACxB;QACJ;QAEA,IAAI,CAAC,UAAU;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAsB;QAC5D;QAEA,MAAM,4HAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;YACzB,OAAO;gBACH,IAAI,SAAS,EAAE;YACnB;QACJ;QAEA,MAAM,sBAAsB,QAAQ;QAEpC,MAAM,WAAW,MAAM,4HAAA,CAAA,SAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YACzC,OAAO;gBACH,IAAI;oBACA;wBACI;oBACJ;oBACA;wBACI,SAAS;oBACb;iBACH;YACL;YACA,SAAS;gBACL,OAAO;oBACH,SAAS;wBACL,WAAW;oBACf;oBACA,SAAS;wBACL,aAAa;4BACT,SAAS;gCACL,SAAS;4BACb;wBACJ;wBACA,aAAa;oBACjB;gBACJ;YACJ;QACJ;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,KAAK;QACV,QAAQ,GAAG,CAAC;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAA6B,GAAG;YAAE,QAAQ;QAAI;IACtF;AACJ"}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}